[0x0000]                       |			%def vbuf_start 400
[0x0000]                       |			%def radius 30
[0x0000]                       |	
[0x0000] 27 190                |			push vbuf_start
[0x0002] 48 05                 |			pop vbp			; clear screen
[0x0004]                       |	
[0x0004] 27 00                 |			push 0
[0x0006] 48 01                 |			pop rax			; rax = 0
[0x0008]                       |	
[0x0008] 27 1e                 |			push radius
[0x000a] 48 03                 |			pop rcx			; rcx = radius
[0x000c]                       |	
[0x000c] 47 01                 |	row_loop_start:	push rax
[0x000e] 27 28                 |			push .sc_height
[0x0010] 10 38                 |			jge row_loop_end	; if (rax >= screen_height) break
[0x0012]                       |	
[0x0012] 27 00                 |			push 0
[0x0014] 48 02                 |			pop rbx			; rbx = 0
[0x0016]                       |	
[0x0016] 47 02                 |	col_loop_start:	push rbx
[0x0018] 27 64                 |			push .sc_width
[0x001a] 10 31                 |			jge col_loop_end	; if (rbx >= screen_width) break
[0x001c]                       |	
[0x001c] 47 01                 |			push rax
[0x001e] 27 64                 |			push .sc_width
[0x0020] 05                    |			mul
[0x0021] 47 02                 |			push rbx
[0x0023] 01                    |			add
[0x0024] 48 04                 |			pop rdx			; rdx = screen_width*rax + rbx
[0x0026]                       |	
[0x0026] 12 3d                 |			call on_circle
[0x0028]                       |	
[0x0028] c8 04                 |			pop [rdx]
[0x002a]                       |	
[0x002a] 47 02                 |			push rbx
[0x002c] 02                    |			inc
[0x002d] 48 02                 |			pop rbx			; increment column number
[0x002f]                       |			
[0x002f] 0b 16                 |			jmp col_loop_start
[0x0031]                       |	
[0x0031] 47 01                 |	col_loop_end:	push rax
[0x0033] 02                    |			inc
[0x0034] 48 01                 |			pop rax			; increment row number
[0x0036]                       |			
[0x0036] 0b 0c                 |			jmp row_loop_start
[0x0038]                       |	
[0x0038] 27 00                 |	row_loop_end:	push 0
[0x003a] 48 05                 |			pop vbp			; display buffer
[0x003c]                       |	
[0x003c] 0a                    |			halt
[0x003d]                       |	
[0x003d]                       |	
[0x003d]                       |	
[0x003d]                       |			%def y0 20
[0x003d]                       |			%def x0 50
[0x003d]                       |			%def y_coeff 11
[0x003d]                       |			%def x_coeff 3
[0x003d]                       |	
[0x003d] 47 01                 |	on_circle:	push rax
[0x003f] 27 14                 |			push y0
[0x0041] 03                    |			sub
[0x0042] 47 01                 |			push rax
[0x0044] 27 14                 |			push y0
[0x0046] 03                    |			sub
[0x0047] 05                    |			mul			; (y-y0)^2
[0x0048] 27 0b                 |			push y_coeff
[0x004a] 05                    |			mul			; b(y-y0)^2
[0x004b]                       |	
[0x004b] 47 02                 |			push rbx
[0x004d] 27 32                 |			push x0
[0x004f] 03                    |			sub
[0x0050] 47 02                 |			push rbx
[0x0052] 27 32                 |			push x0
[0x0054] 03                    |			sub
[0x0055] 05                    |			mul			; (x-x0)^2
[0x0056] 27 03                 |			push 3			; a(x-x0)^2
[0x0058] 05                    |			mul
[0x0059]                       |	
[0x0059] 01                    |			add			; a(x-x0)^2 + b(y-y0)^2
[0x005a]                       |	
[0x005a] 47 03                 |			push rcx
[0x005c] 14                    |			dup
[0x005d] 05                    |			mul
[0x005e] 27 03                 |			push x_coeff
[0x0060] 05                    |			mul			; ar^2
[0x0061] 11 66                 |			jle c_true
[0x0063]                       |	
[0x0063] 27 00                 |			push 0			; a(x-x0)^2 + b(y-y0)^2 > ar^2
[0x0065] 13                    |			ret
[0x0066]                       |		
[0x0066] 27 01                 |		c_true:	push 1			; a(x-x0)^2 + b(y-y0)^2 <= ar^2
[0x0068] 13                    |			ret
[0x0069]                       |	
[0x0069]                       |	
