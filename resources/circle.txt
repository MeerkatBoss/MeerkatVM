		%def vbuf_start 400
		%def radius 30

		push vbuf_start
		pop vbp			; clear screen

		push 0
		pop rax			; rax = 0

		push radius
		pop rcx			; rcx = radius

row_loop_start:	push rax
		push .sc_height
		jge row_loop_end	; if (rax >= screen_height) break

		push 0
		pop rbx			; rbx = 0

col_loop_start:	push rbx
		push .sc_width
		jge col_loop_end	; if (rbx >= screen_width) break

		push rax
		push .sc_width
		mul
		push rbx
		add
		pop rdx			; rdx = screen_width*rax + rbx

		call on_circle

		pop [rdx]

		push rbx
		inc
		pop rbx			; increment column number
		
		jmp col_loop_start

col_loop_end:	push rax
		inc
		pop rax			; increment row number
		
		jmp row_loop_start

row_loop_end:	push 0
		pop vbp			; display buffer

		halt



		%def y0 20
		%def x0 50
		%def y_coeff 11
		%def x_coeff 3

on_circle:	push rax
		push y0
		sub
		push rax
		push y0
		sub
		mul			; (y-y0)^2
		push y_coeff
		mul			; b(y-y0)^2

		push rbx
		push x0
		sub
		push rbx
		push x0
		sub
		mul			; (x-x0)^2
		push 3			; a(x-x0)^2
		mul

		add			; a(x-x0)^2 + b(y-y0)^2

		push rcx
		dup
		mul
		push x_coeff
		mul			; ar^2
		jle c_true

		push 0			; a(x-x0)^2 + b(y-y0)^2 > ar^2
		ret
	
	c_true:	push 1			; a(x-x0)^2 + b(y-y0)^2 <= ar^2
		ret

